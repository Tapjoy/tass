#!/usr/bin/env ruby

require 'tapjoy/autoscaling_bootstrap'

def common_args
  opt :filename, 'Specify config file to load', type: :string, required: true
  opt :prompt, 'Enable/disable prompts', default: true
  opt :env, 'Specify which environment config to load', type: :string
end

def confirm_config(aws_env, misc_config, opts)
  use_vpc = true if misc_config[:vpc_subnets]
  has_elb = true if misc_config.key?(:elb)
  Tapjoy::AutoscalingBootstrap::Base.new.confirm_config(**aws_env,
    **misc_config, **opts, use_vpc: use_vpc, has_elb: has_elb,
    config: misc_config)
end

def initialize_environment(opts)
  config = Tapjoy::AutoscalingBootstrap::Base.new.initialize_environment(opts)
  Aws.config[:region] = config[:aws_region]
  config
end

def legacy_configure_environment(opts)
  warn('NOTE: --env has been deprecated.  Please specify environment in yaml configs.') if opts.key?(:env)
  config, aws_env, user_data = Tapjoy::AutoscalingBootstrap::Base.new.legacy_configure_environment(opts)
  [config, aws_env, user_data]
end

# Are we using a newer yaml schema
def newer_yaml_version?(config)
  Tapjoy::AutoscalingBootstrap::Base.new.check_yaml_version(config).split(".").first.to_i >= 2
end



SUB_COMMANDS = %w(create update audit scale)
Trollop::options do
  usage '[SUB_COMMAND] [options]'
  synopsis "\nConfigures autoscaling groups.\nAvailable subcommands are: #{SUB_COMMANDS}"
  version "#{File.basename($PROGRAM_NAME)} #{Tapjoy::AutoscalingBootstrap::VERSION} \u00A9 2015-2016 Tapjoy, Inc."
  stop_on SUB_COMMANDS
end

cmd = ARGV.shift
case cmd
when 'create'
  opts = Trollop.options do
    # Set help message
    usage 'create [options]'
    synopsis 'This command creates new autoscaling groups, and overwrites existing ones.'

    opt :clobber_elb, 'Force ELB creation', default: false, short: :none
    opt :clobber_as, 'Force AS group creation', default: false, short: :none
    common_args
  end

  config = initialize_environment(opts)
  sfr_config = {}  # @TODO: remove this when SFR config becomes sane

  # check the verison of the yaml we are reading, and do the new hotness if we are running v2 or higher
  if newer_yaml_version?(config)
    # Determine if we are making a cloudformation request
    if config[:stack][:spot_fleet]
      sfr_config.merge!(config[:stack][:spot_fleet][:config_data])
      config[:stack].delete(:spot_fleet)
      Tapjoy::AutoscalingBootstrap::EC2.request_spot_instances(sfr_config,
        config[:userdata_dir])
    end
    if config[:stack]
      # And if we are format the config into readable JSON for the request
      request_parmeter_hash = Tapjoy::AutoscalingBootstrap::Cloudformation.prepare_options_hash(config)
      puts "This is the current request paramter hash: #{request_parmeter_hash}"
      puts "\nAnd it's parsable as JSON:\n"
      puts JSON.parse request_parmeter_hash[:template_body]

    else
    # TODO potentially tie into the old methods if we aren't making a cloudformation request
    puts "Non cloudformation-based requests will be implemented at a later date."
    end
  else
    # Run the legacy code
    config, aws_env, user_data = legacy_configure_environment(config)
    puts "finished the config"
    Tapjoy::AutoscalingBootstrap::Base.new.check_clobber(opts, config)
    unless confirm_config(aws_env, config, opts)
      abort('Cannot continue if configuration is not correct.  Please fix.')
    end
    Tapjoy::AutoscalingBootstrap::AutoscalingGroup.new.create(opts, config, aws_env, user_data)

    if config.key?(:elb)
      config[:elb].each do |elb|
        elb.each do |elb_name, elb_config|
          Tapjoy::AutoscalingBootstrap.elb_name = elb_name
          elb_hash = {
            elb_name => config[:default_elb_parameters].merge!(elb[elb_name])
          }

          Tapjoy::AutoscalingBootstrap::ELB.new(
            elb_hash, config[:clobber_elb], config[:zones],
            config[:security_groups])
        end
      end
    end

    if config.key?(:asg_metrics)
      # We list all metrics because otherwise we can't get GroupStandbyInstances
      Tapjoy::AutoscalingBootstrap::AWS::Autoscaling.client.enable_metrics_collection({
        auto_scaling_group_name: Tapjoy::AutoscalingBootstrap.scaler_name,
        metrics: %w(
          GroupMinSize GroupMaxSize GroupDesiredCapacity GroupInServiceInstances
          GroupPendingInstances GroupStandbyInstances GroupTerminatingInstances
          GroupTotalInstances
        ),
        granularity: '1Minute'
      })
    end
  end
when 'update'
  opts = Trollop.options do
    # Set help message
    usage 'update [options]'
    synopsis 'This command creates new launch configurations based on existing autoscaling groups using local instance configuration files as overrides.'
    common_args
  end

  config = initialize_environment(opts)

  # check the verison of the yaml we are reading, and do the new hotness if we are running v2 or higher
  if newer_yaml_version?(config)
    # Determine if we are making a cloudformation request
    if config[:stack]
      # And if we are format the config into readable JSON for the request
    else
    # TODO potentially tie into the old methods if we aren't making a cloudformation request
    puts "Non cloudformation-based requests will be implemented at a later date."
    end
  else
    config, aws_env, user_data = legacy_configure_environment(config)
    confirm_config(aws_env, config, opts)

    Tapjoy::AutoscalingBootstrap::AutoscalingGroup.new.create(
      opts, config, aws_env, user_data)
  end
when 'audit'
  opts = Trollop.options do
    usage 'audit'
    synopsis 'This command compares local configuration files for a given cluster to the existing launch configuration and autoscaling group running in AWS.'
    common_args
  end

  config = initialize_environment(opts)


  # check the verison of the yaml we are reading, and do the new hotness if we are running v2 or higher
  if newer_yaml_version?(config)
    # TODO: Implement new yaml parsing routine for cloudfront
    puts "Running new parsing routine with:\nconfig: #{config}"
  else
    config, aws_env, user_data = legacy_configure_environment(config)
    config.merge!(aws_env.merge(user_data: Base64.encode64("#{user_data}")))
    Tapjoy::AutoscalingBootstrap::Audit.new(config)
  end
when 'scale'
  opts = Trollop.options do
    usage 'scale [options]'
    synopsis 'This command is used to scale up/down auto scaling groups'
    common_args
    opt :instance_ids, 'Instance IDs to scale down', type: :strings
  end

  config = initialize_environment(opts)

  # check the verison of the yaml we are reading, and do the new hotness if we are running v2 or higher
  if newer_yaml_version?(config)
    # TODO: Implement new yaml parsing routine for cloudfront
    puts "This command will be covered by #update functionality in the v2 schema"
  else
    config, aws_env, user_data = configure_environment(config)
    Tapjoy::AutoscalingBootstrap::Autoscaling::Group.new.scale(config)
  end
else
  Trollop.educate
end
